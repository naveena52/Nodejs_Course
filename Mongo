Roll No  | Hindi | English |  Computer
  1      |  86   |         |
  2      |       |    78   | 
  3      |  69   |         |   78
In the above unstructured data scenario there is a wasteage of space can be seen in the case of MYSQL

Mongo DB Introduction :
NoSql
> Not a sql
> JSON
> bz of json it is good for Both structred and unstructred
> Nested Data 

A/c Terminology wise the saving of data will be :
[
    {
        "rollNo":1,
        "Hindi":86
    },
    {
        "rollNo":2,
        "English":78
    },
    {
        "rollNo":2,
        "Hindi":69,
        "Computer":78
If in future when we need to add one more subject then we simply add by adding one row under that student 
there is no space wasteage 
    }
]
Difference between SQL and MongoDb (a/c to terminology wise):

SQL       |    MongoDB
Database  |  Database
Table     |   Collection
Row       |  Document
Select    |   Find
Insert    |  Insert
Delete    |  Remove
Update    |  Update

//Setup
> Local
> Download MongoDB
* https://www.mongodb.com/try/download/community

# window
> Create folder by the name of data in c drive
C:/data
> Inside data folder create db folder
> C:/data/db

# Mac/linux
> open terminal
> mkdir data/db

> Cloud
* https://www.mongodb.com/
* try free
> signup with google
Two steps need to do 
*1 Network access
>Add the IP Address : 0.0.0.0/0 => open to all 
*2 Database access
> Create user
Built-in Role
> Atlas Admin
> Add User - Button

Default Port > 27017

// Start mongo server (should always running if using in app)
> open the cmd
> go inside bin folder
C:/programfile/mongodb/server/5.0.1/bin
> cd C:/programfile/mongodb/server/5.0.1/bin
> mongod
> do not close this cmd

// Start mongo Client (Need to test query)
> open the cmd
> go inside bin folder
C:/programfile/mongodb/server/5.0.1/bin
> cd C:/programfile/mongodb/server/5.0.1/bin
> mongo 
> Write show dbs
 
 At first installation Mongo Db we see the dbs like 
admin   0.000GB
config  0.000GB
local   0.000GB

///////
* See All the Databases
> show dbs

* To go inside db
> use dbname
example : use student

* See All the collections
> show collections

* See data inside collection
> db.collectionname.find()

The displayed collection is not readable  so in this we can use the pretty inside the collection terminal only
>db.collectionname.find().pretty

* Create Database
> use dbname

Note :
Without collection database will not create and without database collection will not create

* insert data/create collections
> db.users.insert({"name":"Arun","city":"Pune"})
> db.users.insert({"name":"Nikita","city":"Delhi"})
> db.users.insert({"_id":1,"name":"Rohit","city":"Mumbai"})
> db.users.insert({"_id":2,"name":"Neha","city":"Paris"})

_id 
> primary key [it can create automatically by mongo db and can create by giving id by our-end]
> Always unique
> 12 byte 
  * 5byte(random number)
  * 3byte(Series)
  * 4byte(timestamp)

  Note :
  Mixed id for the database can  not work code  properly that means 
  id's that are generated automatically by mongo as object id [object id : 6234hfd23jf234] etc and 
  id's that are generated by our end as [id :1, id :2, etc ]
 
 Db Conection :
 Need to install the package  Mongo Db and make url in .env and need to import in the controller 

 Commands/Queries :
 //find with condition

db.products.find({Brand:"Gucci"})

db.products.find({Brand:"Gucci","Color":"white"})
db.restaurants.find({})

//projection
db.restaurants.find({condition},{projection})

db.restaurants.find({},{restaurant_name:1,cost:1})


db.restaurants.find({},{restaurant_name:1,cost:1,id:0})// with out id we will get the output

db.restaurants.find({},{ _id:0,restaurant_name:1,cost:1}) with out id we will get the output


// projection with condition
db.restaurants.find({state_id:1},{restaurant_name:1,cost:1,_id:0})


db.restaurants.find({state_id:2},{restaurant_name:1,cost:1,_id:0,address:1})

//sort = ascending or  descending order
db.restaurants.find({},{restaurant_name:1,cost:1,_id:0}).sort({cost:1})// ascending order of cost
db.restaurants.find({},{restaurant_name:1,cost:1,_id:0}).sort({cost:-1}// descending order of cost
db.restaurants.find({},{restaurant_name:1,cost:1,_id:0}).sort({restaurant_name:1})//alphabetic order(A-Z)
db.restaurants.find({},{restaurant_name:1,cost:1,_id:0}).sort({restaurant_name:-1})//(Z-A)

//limit printing the first three only
db.restaurants.find({},{restaurant_name:1,cost:1,_id:0}).sort({cost:1}).limit(3)

//skip : here we can print the last three and  in between three in the database by using skip
db.restaurants.find({},{restaurant_name:1,cost:1,_id:0}).sort({cost:1}).skip(0).limit(3)//it will 0-3 & skips =0
db.restaurants.find({},{restaurant_name:1,cost:1,_id:0}).sort({cost:1}).skip(3).limit(3)//it will 4-6 &skips=1-3
db.restaurants.find({},{restaurant_name:1,cost:1,_id:0}).sort({cost:1}).skip(6).limit(3) 7-9
db.restaurants.find({},{restaurant_name:1,cost:1,_id:0}).sort({cost:1}).skip(9).limit(3) 10-12

//update
db.users.update(
  {condition},
  {values}
)

db.user.update(
  {"_id" : 2},
  {
    $set:{
      "address":"654 Model Town",
      "city":"Pune"
    }
  }
)

db.users.update(
  {"_id" : 2},
  {
    $set:{
      "city":"Delhi"
    }
  }
)
//we will delete the address by unset that column
db.users.update(
  {"_id" : 3},
  {
    $unset:{
      "address":1
    }
  }
)

Note : Here in MongoDb by default it takes the first occurs and update that only 
that means if there is two columns with city delhi with id 2 and 3 then it will update the 2 only can't update the 3col

db.users.update(
  {"city":"hyd"},
  {
    $set:{
      "Temp":34
    }
  },
  )

To avoid the above note we need to set multi=true

db.users.update(
  { "city": "hyd" },
  { $set: { "Temp": 34 } },
  { multi: true }
)

//Delete

> Delete All
db.user.remove({})

> Delete particular record
db.user.remove({"name" : "Nikita"})

//delete collections
db.locations.drop()